/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AAccordion {
        /**
          * The type of accordion to be displayed.
         */
        "variant": "default" | "neutral";
    }
    /**
     * @parent accordion
     */
    interface AAccordionContent {
        "open": boolean;
    }
    /**
     * @parent accordion
     */
    interface AAccordionHeader {
        "last": boolean;
        "open": boolean;
        "toggleState": any;
        "type": "default";
    }
    /**
     * @parent accordion
     */
    interface AAccordionItem {
        "last": boolean;
        /**
          * To manage accordion open or collapsed state
         */
        "open": boolean;
        /**
          * Method available from the component to toggle open or collapsed state of accordion
          * @returns promise that resolves to true
         */
        "toggle": () => Promise<boolean>;
        "variant": "default" | "neutral";
    }
    /**
     * a-button component
     */
    interface AButton {
    }
}
declare global {
    interface HTMLAAccordionElement extends Components.AAccordion, HTMLStencilElement {
    }
    var HTMLAAccordionElement: {
        prototype: HTMLAAccordionElement;
        new (): HTMLAAccordionElement;
    };
    /**
     * @parent accordion
     */
    interface HTMLAAccordionContentElement extends Components.AAccordionContent, HTMLStencilElement {
    }
    var HTMLAAccordionContentElement: {
        prototype: HTMLAAccordionContentElement;
        new (): HTMLAAccordionContentElement;
    };
    /**
     * @parent accordion
     */
    interface HTMLAAccordionHeaderElement extends Components.AAccordionHeader, HTMLStencilElement {
    }
    var HTMLAAccordionHeaderElement: {
        prototype: HTMLAAccordionHeaderElement;
        new (): HTMLAAccordionHeaderElement;
    };
    /**
     * @parent accordion
     */
    interface HTMLAAccordionItemElement extends Components.AAccordionItem, HTMLStencilElement {
    }
    var HTMLAAccordionItemElement: {
        prototype: HTMLAAccordionItemElement;
        new (): HTMLAAccordionItemElement;
    };
    /**
     * a-button component
     */
    interface HTMLAButtonElement extends Components.AButton, HTMLStencilElement {
    }
    var HTMLAButtonElement: {
        prototype: HTMLAButtonElement;
        new (): HTMLAButtonElement;
    };
    interface HTMLElementTagNameMap {
        "a-accordion": HTMLAAccordionElement;
        "a-accordion-content": HTMLAAccordionContentElement;
        "a-accordion-header": HTMLAAccordionHeaderElement;
        "a-accordion-item": HTMLAAccordionItemElement;
        "a-button": HTMLAButtonElement;
    }
}
declare namespace LocalJSX {
    interface AAccordion {
        /**
          * The type of accordion to be displayed.
         */
        "variant"?: "default" | "neutral";
    }
    /**
     * @parent accordion
     */
    interface AAccordionContent {
        "open"?: boolean;
    }
    /**
     * @parent accordion
     */
    interface AAccordionHeader {
        "last"?: boolean;
        "open"?: boolean;
        "toggleState"?: any;
        "type"?: "default";
    }
    /**
     * @parent accordion
     */
    interface AAccordionItem {
        "last"?: boolean;
        /**
          * To manage accordion open or collapsed state
         */
        "open"?: boolean;
        "variant"?: "default" | "neutral";
    }
    /**
     * a-button component
     */
    interface AButton {
    }
    interface IntrinsicElements {
        "a-accordion": AAccordion;
        "a-accordion-content": AAccordionContent;
        "a-accordion-header": AAccordionHeader;
        "a-accordion-item": AAccordionItem;
        "a-button": AButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "a-accordion": LocalJSX.AAccordion & JSXBase.HTMLAttributes<HTMLAAccordionElement>;
            /**
             * @parent accordion
             */
            "a-accordion-content": LocalJSX.AAccordionContent & JSXBase.HTMLAttributes<HTMLAAccordionContentElement>;
            /**
             * @parent accordion
             */
            "a-accordion-header": LocalJSX.AAccordionHeader & JSXBase.HTMLAttributes<HTMLAAccordionHeaderElement>;
            /**
             * @parent accordion
             */
            "a-accordion-item": LocalJSX.AAccordionItem & JSXBase.HTMLAttributes<HTMLAAccordionItemElement>;
            /**
             * a-button component
             */
            "a-button": LocalJSX.AButton & JSXBase.HTMLAttributes<HTMLAButtonElement>;
        }
    }
}
